// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ToYCbCr
#pragma kernel ToRGB

static const uint THREADS = 1024;
static const uint SQRT_THREADS = 32;

float RGB2Y(float3 RGB)
{
    float Y = RGB.x * 0.29900f + RGB.y * 0.58700f + RGB.z * 0.11400f;
    
    return Y;
}

float2 RGB2CbCR(float3 RGB)
{
    float Cb = RGB.x * -0.16874f + RGB.y * -0.33126f + RGB.z * 0.50000f + .5f;
    float Cr = RGB.x * 0.50000f + RGB.y * -0.41869f + RGB.z * -0.08131f + .5f;
    
    return float2(Cb, Cr);
}

float3 YCbCr2RGB(float Y, float Cb, float Cr)
{
    float R = Y + (Cr - .5f) * 1.40200f;
    float G = Y + (Cb - .5f) * -0.34414f + (Cr - .5f) * -0.71414f;
    float B = Y + (Cb - .5f) * 1.77200f;

    return float3(R, G, B);
}

Texture2D<float3> _RBGTexIn;
RWTexture2D<float> _YTexOut;
RWTexture2D<float> _CbTexOut;
RWTexture2D<float> _CrTexOut;

uint2 _SubsampleTexSize;

uint _CbCrSubsample;

[numthreads(SQRT_THREADS, SQRT_THREADS, 1)]
void ToYCbCr (uint2 id : SV_DispatchThreadID)
{
    if (id.x >= _SubsampleTexSize.x || id.y >= _SubsampleTexSize.y)
        return;
    
    float2 CbCrVal = float2(0, 0);
    int CbCrDivider = 0;
    for (uint x = 0; x < _CbCrSubsample; x++)
    {
        for (uint y = 0; y < _CbCrSubsample; y++)
        {
            float3 RGBVal = _RBGTexIn[(id.xy * _CbCrSubsample) + uint2(x, y)];
            float YVal = RGB2Y(RGBVal);
            _YTexOut[(id.xy * _CbCrSubsample) + uint2(x, y)] = YVal;
            CbCrVal += RGB2CbCR(RGBVal);
            CbCrDivider++;
        }
    }
    CbCrVal /= float(CbCrDivider);
    //float2 CbCrVal = RGB2CbCR(_RBGTexIn[(id.xy * _CbCrSubsample)]);
    _CbTexOut[id.xy] = CbCrVal.x;
    _CrTexOut[id.xy] = CbCrVal.y;
}

RWTexture2D<float3> _RBGTexOut;
Texture2D<float> _YTexIn;
Texture2D<float> _CbTexIn;
Texture2D<float> _CrTexIn;

SamplerState sampler_YTexIn;
SamplerState sampler_CbTexIn;
SamplerState sampler_CrTexIn;

uint2 _FullTexSize;

[numthreads(SQRT_THREADS, SQRT_THREADS, 1)]
void ToRGB (uint2 id : SV_DispatchThreadID)
{
    if (id.x >= _FullTexSize.x || id.y >= _FullTexSize.y)
        return;
    
    float2 uv = id.xy / float2(_FullTexSize);
    float3 RGBVal = YCbCr2RGB(
        _YTexIn.SampleLevel(sampler_YTexIn, uv, 0),
        _CbTexIn.SampleLevel(sampler_CbTexIn, uv, 0),
        _CrTexIn.SampleLevel(sampler_CrTexIn, uv, 0)
    );
    
    _RBGTexOut[id.xy] = RGBVal;
}

/*
[numthreads(SQRT_THREADS, SQRT_THREADS, 1)]
void ToRGB (uint2 id : SV_DispatchThreadID)
{
    if (id.x >= _SubsampleTexSize.x || id.y >= _SubsampleTexSize.y)
        return;
    
    for (uint x = 0; x < _CbCrSubsample; x++)
    {
        for (uint y = 0; y < _CbCrSubsample; y++)
        {
            float3 RGBVal = YCbCr2RGB(
                _YTex[(id.xy * _CbCrSubsample) + uint2(x, y)],
                _CbTex[id.xy],
                _CrTex[id.xy]
            );
            
            _RBGTex[(id.xy * _CbCrSubsample) + uint2(x, y)] = RGBVal;
        }
    }
}
*/
